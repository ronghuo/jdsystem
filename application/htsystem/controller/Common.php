<?php

namespace app\htsystem\controller;

use app\htsystem\model\AdminLogs;
use app\htsystem\model\Admins;
use think\Controller;
use think\Request;
use app\common\library\Mylog;
use app\common\library\StaticCache;
use app\common\model\UserUsers;
use app\common\model\UserManagers;

class Common extends Controller
{
    const PAGE_SIZE = 20;

    protected $middleware = ['SystemAuth'/*, 'AccessChecker'*/];

    /**
     * 权限级别
     */
    const POWER_LEVEL_CITY = 1;         // 市级
    const POWER_LEVEL_COUNTY = 2;       // 县(区)级
    const POWER_LEVEL_STREET = 3;       // 乡镇(街道)级
    const POWER_LEVEL_COMMUNITY = 4;    // 村(社区)级

    /**
     * 操作类型
     */
    const OPER_TYPE_CREATE = 1; // 增
    const OPER_TYPE_DELETE = 2; // 删
    const OPER_TYPE_UPDATE = 3; // 改
    const OPER_TYPE_QUERY = 4;  // 查

    /**
     * 日志内容换行符
     */
    const LOG_CONTENT_BREAK = '<br/>';

    protected $admin_log_target_type = '';  // 后台用户操作日志-目标类型


    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub

        //echo config('cache_version_file');
        $jd_cache = StaticCache::getVer(config('cache_version_file'));
//        var_dump($jd_cache);exit;
//        print_r($jd_cache);exit;
        $this->assign('jd_cache_ver', $jd_cache['version']);
    }

    public function _empty()
    {

        return [
            'code'=>404,
            'msg'=>'not found'
        ];
    }

    protected function getPowerLevel() {
        return session('power_level');
    }

    protected function isSuperAdmin() {
        return session('superadmin');
    }

    protected function getManageWhere(){
        $where = [];
        $superadmin = session('superadmin');
        if ($superadmin) {
            return $where;
        }
        $power_level = session('power_level');
        $admin = session('info');
        // 市级
        if ($power_level == self::POWER_LEVEL_CITY) {
            return $where;
        }
        // 县级
        elseif ($power_level == self::POWER_LEVEL_COUNTY) {
            $where['COUNTY_ID_12'] = $admin['POWER_COUNTY_ID_12'];
        }
        // 乡级
        elseif ($power_level == self::POWER_LEVEL_STREET) {
            $where['STREET_ID'] = $admin['POWER_STREET_ID'];
        }
        // 村级
        elseif ($power_level == self::POWER_LEVEL_COMMUNITY) {
            $where['COMMUNITY_ID'] = $admin['POWER_COMMUNITY_ID'];
        }
        return $where;
    }

    protected function getAdminWhere() {
        $where = [];
        $superadmin = session('superadmin');
        if ($superadmin) {
            return $where;
        }
        $power_level = session('power_level');
        $admin = session('info');
        // 市级
        if ($power_level == self::POWER_LEVEL_CITY) {
            return $where;
        }
        // 县级
        elseif ($power_level == self::POWER_LEVEL_COUNTY) {
            $where['POWER_COUNTY_ID_12'] = $admin['POWER_COUNTY_ID_12'];
        }
        // 乡级
        elseif ($power_level == self::POWER_LEVEL_STREET) {
            $where['POWER_STREET_ID'] = $admin['POWER_STREET_ID'];
        }
        // 村级
        elseif ($power_level == self::POWER_LEVEL_COMMUNITY) {
            $where['POWER_COMMUNITY_ID'] = $admin['POWER_COMMUNITY_ID'];
        }
        return $where;
    }

    protected function checkUUid($uuid){
        $ids = $this->getManageUUids();
        if($ids == 'all'){
            return true;
        }
        return !!in_array($uuid, $ids);
    }

    //获取权限范围内的康复人员id
    protected function getManageUUids(){
        $superadmin = session('superadmin');
        if($superadmin){
            return 'all';
        }
        $power_level = session('power_level');
        $admin = session('info');
        // 市级
        if ($power_level == self::POWER_LEVEL_CITY){
            return 'all';
        }

        $cache_key = 'admin_power_user:' . session('user_id');
        $ids = cache($cache_key);
        if ($ids) {
            return $ids;
        }

        $ids = UserUsers::field('ID')->where('ISDEL', 0)
            ->where(function ($q) use($power_level, $admin){
                // 县级
                if ($power_level == self::POWER_LEVEL_COUNTY) {
                    $q->where('COUNTY_ID_12', $admin['POWER_COUNTY_ID_12']);
                }
                // 乡级
                elseif ($power_level == self::POWER_LEVEL_STREET) {
                    $q->where('STREET_ID', $admin['POWER_STREET_ID']);
                }
                // 村级
                elseif ($power_level == self::POWER_LEVEL_COMMUNITY) {
                    $q->where('COMMUNITY_ID', $admin['POWER_COMMUNITY_ID']);
                }
            })->select()->column('ID');

        cache($cache_key,$ids,60);

        return $ids;

    }

    protected function checkMUid($muid) {
        $ids = $this->getManageMuids();
        if($ids == 'all'){
            return true;
        }
        return !!in_array($muid, $ids);
    }

    //获取权限范围内的管理人员id
    protected function getManageMuids(){
        $superadmin = session('superadmin');
        if ($superadmin) {
            return 'all';
        }
        $power_level = session('power_level');
        $admin = session('info');
        // 市级
        if ($power_level == self::POWER_LEVEL_CITY){
            return 'all';
        }

        $cache_key = 'admin_power_manager:'.session('user_id');
        $ids = cache($cache_key);
        if($ids){
            return $ids;
        }

        $ids = UserManagers::field('ID')->where('ISDEL', 0)
            ->where(function ($q) use($power_level, $admin){
                // 县级
                if($power_level == self::POWER_LEVEL_COUNTY) {
                    $q->where('COUNTY_ID_12', $admin['POWER_COUNTY_ID_12']);
                }
                // 乡级
                elseif ($power_level == self::POWER_LEVEL_STREET) {
                    $q->where('STREET_ID', $admin['POWER_STREET_ID']);
                }
                // 村级
                elseif ($power_level == self::POWER_LEVEL_COMMUNITY) {
                    $q->where('COMMUNITY_ID', $admin['POWER_COMMUNITY_ID']);
                }
            })->select()->column('ID');

        cache($cache_key,$ids,60);

        return $ids;
    }

    protected function checkAdminid($adminid) {
        $ids = $this->getManageAdminids();
        if ($ids == 'all'){
            return true;
        }
        return in_array($adminid, $ids);
    }

    protected function getManageAdminids(){
        $superadmin = session('superadmin');
        if ($superadmin) {
            return 'all';
        }
        $power_level = session('power_level');
        $admin = session('info');
        // 市级
        if ($power_level == self::POWER_LEVEL_CITY){
            return 'all';
        }

        $cache_key = 'admin_power_admin:'.session('user_id');
        $ids = cache($cache_key);
        if ($ids) {
            return $ids;
        }

        $ids = Admins::field('ID')->where('ISDEL', 0)
            ->where(function ($q) use($power_level, $admin) {
                // 县级
                if ($power_level == self::POWER_LEVEL_COUNTY) {
                    $q->where('POWER_COUNTY_ID_12', $admin['POWER_COUNTY_ID_12']);
                }
                // 乡级
                elseif ($power_level == self::POWER_LEVEL_STREET) {
                    $q->where('POWER_STREET_ID', $admin['POWER_STREET_ID']);
                }
                // 村级
                elseif ($power_level == self::POWER_LEVEL_COMMUNITY) {
                    $q->where('POWER_COMMUNITY_ID', $admin['POWER_COMMUNITY_ID']);
                }
            })->select()->column('ID');

        cache($cache_key, $ids,60);

        return $ids;
    }

    /**
     * 是否有机构管理权限
     * @param $deptAreaCode 所属区域代码
     * @return bool
     */
    protected function isDeptManageAllowed($deptAreaCode) {
        $superadmin = session('superadmin');
        if ($superadmin) {
            return true;
        }
        $power_level = session('power_level');
        $admin = session('info');
        // 市级
        if ($power_level == self::POWER_LEVEL_CITY) {
            return true;
        }
        // 县级
        elseif ($power_level == self::POWER_LEVEL_COUNTY) {
            $countyId = substr($admin['POWER_COUNTY_ID_12'], 0, 6);
            return strpos($deptAreaCode, $countyId) === 0;
        }
        else {
            $this->error('权限不足');
        }
    }

    /**
     * 是否有社区数据管理权限
     * @param $areaCode 所属区域代码
     * @return bool
     */
    protected function isSubareaManageAllowed($areaCode) {
        $superadmin = session('superadmin');
        if ($superadmin) {
            return true;
        }
        $power_level = session('power_level');
        $admin = session('info');
        // 市级
        if ($power_level == self::POWER_LEVEL_CITY) {
            return true;
        }
        // 县级
        elseif ($power_level == self::POWER_LEVEL_COUNTY) {
            $countyId = substr($admin['POWER_COUNTY_ID_12'], 0, 6);
            return $areaCode == $countyId;
        }
        else {
            $this->error('权限不足');
        }
    }

    protected function clientTags(){
        return [
            1=>'康复端',
            2=>'管理端',
            3=>'康复端 & 管理端',
        ];
    }

    protected function uploadImage(Request $request, $dir=[], $fileNames = ['images']) {
        try {
            $save_files = [];
            $errors = [];
            foreach ($fileNames as $fileName) {
                $file = $request->file($fileName);

                if (empty($file)) {
                    continue;
                }

                $save_path = './uploads/' . implode('/', $dir);
                $info = $file->validate(['size' => 5 * 1024 * 1024, 'ext' => 'jpg,jpeg,png,gif'])->move($save_path);
                if ($info) {
                    $save_files[] = $save_path . $info->getSaveName();
                } else {
                    // 上传失败获取错误信息
                    $errors[] = $file->getError();
                }
            }
            return ['images'=>$save_files,'errors'=>$errors];

        } catch (\Exception $e){
            Mylog::write([
                implode('/',$dir),
                $e->getMessage(),
                $e->getFile(),
                $e->getLine(),
                $_FILES
            ],'error_uploads');
            return false;
        }

    }

    /**
     * 筛选的链接处理
     * @param int $f
     * @return string
     */
    protected function filterLink($p,$cate,$parm=array()){

        $default = array(
            'k'=>'f',
            'allkv'=>0,
            'alltxt'=>'全部'
        );

        $parm = empty($parm)?$default:array_merge($default,$parm);

        $class = ' btn-success';
        $links = array(
            array('p'=>'?'.$parm['k'].'='.$parm['allkv'],'t'=>$parm['alltxt'],'v'=>$parm['allkv'])
        );
        foreach($cate as $kd=>$v){
            $links[] = array('p'=>'?'.$parm['k'].'='.$kd,'t'=>$v,'v'=>$kd);
        }
        $tpl = '<a href="{P}" class="btn{C}">{T}</a>';
        $str = '';
        foreach($links as $k=>$lk){
            $c = $p==$lk['v']?$class:'';
            $str .= str_replace(array('{P}','{C}','{T}'),array($lk['p'],$c,$lk['t']),$tpl).'&nbsp;';
        }
        return $str;
    }
    /**
     * 筛选的下拉处理
     * @param $k
     * @return string
     */
    protected function filterSelect($sk,$parm){
        if(empty($parm)){
            return '';
        }
        $cked = ' selected';
        $opts = [];
        foreach($parm as $k=>$p){
            $opts[] = ['v'=>$k,'t'=>$p];
        }

        $tpl = '<option value="{V}"{S}>{T}</option>';
        $str = '';
        foreach($opts as $op){
            $c = $op['v']==$sk ? $cked : '';
            $str .= str_replace(['{V}','{S}','{T}'],[$op['v'],$c,$op['t']],$tpl);
        }
        return $str;
    }

    protected function loadJsCss($data, $type = 'js', $module = 'admin') {
        $newData = array();
        //print_r($data);exit;
        foreach ($data as $val) {
            $val      = trim($val);
            $fpath    = '';
            $fname    = '';
            $fnamemin = '';

            if (strpos($val, 'http://') !== false || strpos($val, 'https://') !== false) {
                $newData[] = $val;
                continue;
            }

            //
            if (strpos($val, 'p:') !== false) {
                $fpath = './static/plugin/' . str_replace('p:', '', $val);
            } else {
                $fpath = './static/' . strtolower($module . '/' . $type) . '/' . $val;
            }

            $fname = $fpath . '.' . strtolower($type);

            if (!file_exists($fname)) {
                continue;
            }

            $fnamemin = $fpath . '.min.' . strtolower($type);

            $newData[] = file_exists($fnamemin) ? ltrim($fnamemin, '.') : ltrim($fname, '.');
        }

        return $newData;
    }

    protected function jsalert($mesg, $type = 0, $url = '') {
        echo '<script type="text/javascript">';
        echo 'alert("' . $mesg . '");';

        if ($type > 0) {
            //echo 'setTimeout(function(){';
            switch ($type) {
                case 1:
                    echo 'window.location.reload();';
                    break;
                case 2:
                    echo 'window.location.href="' . $url . '";';
                    break;
                case 3:
                    echo 'window.parent.location.reload();';
                    break;
                case 4:
                    echo 'window.parent.location.href="' . $url . '";';
                    break;
                case 5:
                    echo 'window.history.back();';
                    break;
                case 6:
                    echo 'window.parent.history.back();';
                    break;
                case 7:
                    echo 'window.parent.closelayer();';
                    break;
            }
            //echo '},1800)';
        }

        echo '</script>';
        exit;
    }

    /**
     * 后台公共分页方法
     * @param     $count
     * @param int $rowsize
     * @return array
     */
    protected function _pagenav($count, $rowsize = 15) {
        static $P = null;
        if (is_null($P)) {
            $P = new \extend\Page($count, $rowsize);
        }
        $config = array(
            'first' => '首页',
            'last' => '末页',
            'prev'=>'上一页',
            'next'=>'下一页',
            'theme' => '%first% %upPage% %linkPage% %downPage% %end%'
        );
        $P->replaceConfig($config);
        return array(
            'offset'=>$P->firstRow,
            'limit' =>$P->listRows,
            'txt' =>$P->getHeader(),
            'links' =>$P->show2()
        );
    }

    protected function addAdminLog($operType, $operName = '', $content = '', $targetId = '') {
        $request = request();
        $log = new AdminLogs();
        $log->USER_ID = session('user_id');
        $log->USER_NAME = session('username');
        $log->OPER_TYPE = $operType;
        $log->OPER_CODE = '';
        $log->OPER_NAME = $operName;
        $log->CONTENT = empty($content) ? $operName : $content;
        $log->IP = get_client_ip();
        $log->URL = $request->url();
        $log->TARGET_TYPE = $this->admin_log_target_type;
        $log->TARGET_ID = $targetId;
        $log->ADD_TIME = date("Y-m-d H:i:s");
        $log->save();
    }

}
